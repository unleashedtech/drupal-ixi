<?php

/**
 * @file
 * InDesign XML Importer file
 *
 * Install file for the xml importer.
 */


/**
 * Implements hook_install().
 */
function ixi_install() {
}

/**
 * Implements hook_uninstall().
 */
function ixi_uninstall() {
  variable_del('ixi_group_content_type');
  variable_del('ixi_group_fields');
}

/**
 * Implements hook_requirements().
 */
function ixi_requirements($phase) {
  $requirements = array();
  // ensure translations don't break during installation
  $t = get_t();
  switch ($phase) {
    case 'install':
      $directory = 'private://ixi_archives';
      if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
        $requirements['ixi_archive_dir'] = array(
          'title' => $t('Archive Directory'),
          'description' => $t('Couldn\'t create the directory where we\'ll store uploaded archives. Check your permissions for %directory.',
            array('%directory' => $directory)),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      if (!extension_loaded('zip')) {
        $requirements['ixi_zip_extension'] = array(
          'title' => $t('Zip Extension'),
          'description' => $t('You must enable the zip extension.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      if (!class_exists('DOMDocument')) {
        $requirements['ixi_phpdom'] = array(
          'title' => $t('PHP Document Object Model'),
          'description' => $t('You must enable PHP\'s <a href="@url">Document Object Model</a>.', array('@url' => 'http://php.net/manual/en/book.dom.php')),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
    case 'update': break;
    case 'runtime':
      $directory = 'private://ixi_archives';
      if (!file_prepare_directory($directory)) {
        $description = $t('The archive directory is missing or not writable. Please check %directory.', array('%directory' => $directory));
        $requirements['ixi_archive_dir'] = array(
          'title' => 'InDesign Archive Directory',
          'description' => $description . ' ' . l(t('Recreate archive directory'), 'admin/reports/status/ixi/archive_directory'),
          'value' => 'Missing or Not Writable',
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function ixi_schema() {
  $schema['ixi_archive_uploads'] = array(
    'description' => 'Tracks uploaded archives and the group nodes they point to.',
    'fields' => array(
      'xid' => array(
        'description' => 'The ixi upload id. This will be used to track individual files.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => 'The file id of the uploaded archive.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The node id of the group node that was created alongside this upload.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'processed' => array(
        'description' => 'A boolean tracking whether this archive has been processed or not.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('xid'),
  );

  $schema['ixi_xml_queue'] = array(
    'description' => 'Tracks individual xml files that need to be imported.',
    'fields' => array(
      'id' => array(
        'description' => 'Internal ID of the XML file.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'xid' => array(
        'description' => 'The id of the XML upload.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'xml_path' => array(
        'description' => 'Path of the XML file in the archive.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'xml_filename' => array(
        'description' => 'Filename of the XML file in the archive.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'xml' => array(
        'description' => 'Raw XML if the file was corrected.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'xml_diff' => array(
        'description' => 'A diff from the old XML to the new XML if it was corrected.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'checksum_old' => array(
        'description' => 'Md5 sum of the original XML.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'checksum_new' => array(
        'description' => 'Md5 sum of the corrected XML if it exists.',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'images' => array(
        'description' => 'An array of image paths and indexes associated with the XML file.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'processed' => array(
        'description' => 'A boolean tracking whether this file has been processed or not.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}
